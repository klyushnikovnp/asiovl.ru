<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;




/**
 * Implements hook_form_system_theme_settings_alter().
 * Установка настроек темы
 */
function asio_form_system_theme_settings_alter(&$form, $form_state) {
  $form['asio_settings']['contacts'] = [
    '#type' => 'details',
    '#title' => t('Contacts'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  ];
  $form['asio_settings']['contacts']['name'] = [
    '#type' => 'textfield',
    '#title' => t('Название компании:'),
    '#default_value' => theme_get_setting('name'),
  ];  
  $form['asio_settings']['contacts']['address'] = [
    '#type' => 'textfield',
    '#title' => t('Адрес:'),
    '#default_value' => theme_get_setting('address'),
  ];	  
  $form['asio_settings']['contacts']['phone'] = [
    '#type' => 'textfield',
    '#title' => t('Основной номер телефона:'),
    '#default_value' => theme_get_setting('phone'),
  ];
  $form['asio_settings']['contacts']['email'] = [
    '#type' => 'textfield',
    '#title' => t('E-mail:'),
    '#default_value' => theme_get_setting('email'),
  ];	
  $form['asio_settings']['contacts']['time_work'] = [
    '#type' => 'textfield',
    '#title' => t('Время работы:'),
    '#default_value' => theme_get_setting('time_work'),
  ];	  
  $form['asio_settings']['contacts']['map'] = [
    '#type' => 'textfield',
    '#title' => t('Координаты на карте Яндекс:'),
    '#default_value' => theme_get_setting('map'),
  ];	   

}	

/*
*
* Вывод в шаблон block--system-branding-block.html.twig
* @name -> название сайта
*/
function asio_preprocess_block__system_branding_block(&$variables) {
	$variables['name_site'] = theme_get_setting('name');
}	


/*
*
* Вывод в шаблон block--address-block.html.twig
* @address -> адрес компании
* @phone -> Основной номер телефона
* @time -> Время работы
*/
function asio_preprocess_block__address_block(&$variables) {
	$variables['address'] = theme_get_setting('address');
	$variables['phone'] = theme_get_setting('phone');
	$variables['time'] = theme_get_setting('time_work');
}	

/*
*
* Вывод в шаблон block--map.html.twig
* @address -> адрес компании
* @phone -> Основной номер телефона
* @map -> Координаты на карте
*/
function asio_preprocess_block__map(&$variables) {
	$variables['address'] = theme_get_setting('address');
	$variables['phone'] = theme_get_setting('phone');
	$variables['email'] = theme_get_setting('email');
	$variables['map'] = theme_get_setting('map'); 
	$variables['name'] = theme_get_setting('name');
}	

/*
*
* Вывод в шаблон block--copyright.html.twig
* @address -> адрес компании
* @phone -> Основной номер телефона
* @map -> Координаты на карте
*/
function asio_preprocess_block__copyright(&$variables) {
	$variables['name'] = theme_get_setting('name');
	$variables['year'] = date('Y');
}	

/*
*
* Вывод в шаблон block--phone-bottom.html.twig
* @address -> адрес компании
* @phone -> Основной номер телефона
* @map -> Координаты на карте
*/
function asio_preprocess_block__phone_bottom(&$variables) {
	$variables['phone'] = theme_get_setting('phone');
	$variables['address'] = theme_get_setting('address');
}	


/*
*
* Вывод в шаблон block--contacts.html.twig
* @address -> адрес компании
* @phone -> Основной номер телефона
* @map -> Координаты на карте
*/
function asio_preprocess_block__contacts(&$variables) {
	$variables['address'] = theme_get_setting('address');
	$variables['phone'] = theme_get_setting('phone');
	$variables['email'] = theme_get_setting('email');
	$variables['map'] = theme_get_setting('map'); 
	$variables['name'] = theme_get_setting('name');
}	



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * создание suggestions form--search-block-form.html.twig
 */
function asio_theme_suggestions_form_alter(&$suggestions, $variables) {
	if($variables['element']['#form_id'] == 'search_block_form'){		
		$suggestions[] = 'form__' . $variables['element']['#theme'][0]; // Machine name of form.
	}	
}
  
/*
*
* @Замена в крошках имени 'Home' на 'Главная'
*/
function asio_preprocess_breadcrumb(&$variables) {
	$variables['breadcrumb'][0]['text'] = "Главная";
}	  


/*
* @Функция подключения библиотек js на страницу
* 
*/
function asio_page_attachments_alter(&$head_elements) {

	$alias = \Drupal::request()->getRequestUri();
	if($alias == '/contacts'){
		$head_elements['#attached']['library'][] = 'asio/yandex';
	}
	if($alias == '/works'){
		$head_elements['#attached']['library'][] = 'asio/fancybox';
	}
	//подключение на главную страницу owl carousel
	if( \Drupal::service('path.matcher')->isFrontPage()){
		$head_elements['#attached']['library'][] = 'asio/owl';
		$head_elements['#attached']['library'][] = 'asio/yandex';
	}
}	


/*
*
* Вывод в шаблон views-view-field--field-settings.html.twig
* нового значения поля {{ fields.field_settings.content }}
* выводиться только первые 4-е значения характеристик
*/

function asio_preprocess_views_view_field__field_settings(&$variables) {
	if($variables['field']->field == 'field_settings' && $variables['row']->_entity->getType() == 'product'){
		//kint($variables['row']->_entity->get('field_settings'));
		$arr = $variables['row']->_entity->get('field_settings')->getEntity()
				->get('field_settings')->getValue();
		$variables['id_settings'] = $arr;		
		$i=0;
		foreach($arr as $value){
			if($i<4){
				$term = get_taxonomy_term($arr[$i]['target_id']);
				$id_point = $term->field_point->getValue();
				$point = get_taxonomy_term($id_point[0]['target_id']);
				$variables['field_settings'][$i]['title'] = $term->name->value;
				$variables['field_settings'][$i]['point'] = $point->name->value;
			}
			else break;	
			$i++; 
		}
	}
}

function asio_preprocess_field__node__body__product(&$variables) {
	$entity = $variables['element']['#items']->getEntity();	 
	$list = $entity->field_settings->getValue();
	
	foreach($list as $i=>$item){
		$variables['product_settings'][$i]['name'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_name_settings');
		$variables['product_settings'][$i]['value'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_value');			
		$variables['product_settings'][$i]['point'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_point');				
	}	
	//ksm($variables);
}	


/*
*
* 
* @field_name_settings - имя термина
* @field_point - единицы измерения 
* @field_value - значение термина 
*/


function asio_preprocess_field__node__field_settings__product(&$variables) {
	$list = $variables['element']['#items']->getValue();

	foreach($list as $i=>$item){
		$variables['field_product_settings'][$i]['name'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_name_settings');
		$variables['field_product_settings'][$i]['value'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_value');			
		$variables['field_product_settings'][$i]['point'] = 
			get_name_taxonomy_term($list[$i]['target_id'], 'field_point');				
	}
}	



/*
*
* Возвращает наименование термина таксономии
* @id - термина тексономии
* @parameter - имя поля таксономии
*/
function get_name_taxonomy_term($id, $parameter){
	$term = get_taxonomy_term($id);
	$id_settings = $term->get($parameter)->getValue();
	$name_settings = get_taxonomy_term($id_settings[0]['target_id']);
	return $name_settings->name->value;
}


/*
*
* Возвращает наименование термина таксономии
* @id - термина тексономии
*/
function get_taxonomy_term($id){
	if (!empty($id) && isset($id)){
		$term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($id);
		return $term;
		}
	else{return NULL;}	
}


/*
*
* Добавляет suggestions на все страницах page--product.html.twig
* 
*/
function asio_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
	$node = \Drupal::request()->attributes->get('node');
	if (!empty($node) && is_object($node)) {
		$suggestions[] = $hook ."__". $node->getType();
	}
}	 


/*
*
* Добавляет suggestions на все страницах page-title--product.html.twig
* @ Убирает page_title с продуктовых страниц
*/
function asio_theme_suggestions_page_title_alter(array &$suggestions, array $variables, $hook) {
	$node = \Drupal::request()->attributes->get('node');
	if (!empty($node) && is_object($node)) {
		$suggestions[] = $hook ."__". $node->getType();
	}
}	


/*
*
* Вывод в шаблон views-view-field--field-settings.html.twig
* нового значения поля {{ fields.field_settings.content }}
* выводиться только первые 4-е значения характеристик
*/

function asio_preprocess_field__field_modification(&$variables) {
	foreach($variables['items'] as $key=>$item){
		$nid[$key] = $item['content']['#url']->getRouteParameters();
		}
	foreach($nid as $key=>$value){
		$entity[$key] = asio_getEntity($value['node'], 'modification');
	}

	foreach($entity as $key=>$value){
		$item = current($value);
		//ksm($item);
		$variables['modification'][$key]['nid'] = 	$item->get('nid')->value;
		$variables['modification'][$key]['title'] = 	$item->get('title')->value;
		$variables['modification'][$key]['add_to_cart_price'] = 	$item->get('add_to_cart_price')->value;
	} 
}


function asio_getEntity($nid, $type){
	$query = \Drupal::entityQuery('node');
	$query->condition('type', $type);
	$query->condition('nid', $nid);
	$query->condition('status', 1);
	$nids = $query->execute();	
	
	$nodes = \Drupal\node\Entity\Node::loadMultiple($nids);	
	return $nodes; 
}


/*
*
* Задание классов для формы подверждения заказа id=node_basic_cart_order_form
*
*/
function asio_form_node_basic_cart_order_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	$form['basic_cart_message']['widget'][0]['value']['#attributes']['class'][] = 'form-control mb-3';
	$form['basic_cart_address']['widget'][0]['value']['#attributes']['class'][] = 'form-control mb-3';
	$form['basic_cart_email']['widget'][0]['value']['#attributes']['class'][] = 'form-control mb-3';
	$form['basic_cart_phone']['widget'][0]['value']['#attributes']['class'][] = 'form-control mb-3';
	$form['title']['widget'][0]['value']['#attributes']['class'][] = 'form-control mb-3';
	$form['title']['widget'][0]['value']['#title'] = t('Имя');
	$form['#attributes']['class'][] = "col-lg-8";
}	



/*
*
* Задание классов для формы подверждения заказа id=search-form
*
*/
function asio_form_search_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	//$form['edit-keys']['widget'][0]['value']['#prefix'] = "<div class='form-row'>";

	$form['#prefix'] = "<div class='search-form mb-5'>";
	$form['#suffix'] = "</div>";
 //kint($form);
}	

/*
*
* Функция выдает url по ID в шалбон views-view-field--field-link.html.twig
*
*/

function asio_preprocess_views_view_field__field_link(&$variables) {
	if($variables['field']->field == 'field_link'){
		$arr = $variables['row']->_entity->get('field_link')->getValue();

		$media = Media::load($arr[0]['target_id']);
		$type = $media->bundle->getValue();
		if($type[0]['target_id'] == 'document'){
			$fid = $media->field_media_document->target_id;
			$file = File::load($fid);
			$url = $file->getFileUri(); 
			$img = \Drupal::service('file_system')->realpath($url);
			$path_file = substr($img, 33);
			}
		else{$path_file = $media->field_media_oembed_video->value;}
		$variables['path_file'][$arr[0]['target_id']]['path'] = $path_file;
		//kint($path_file);
	}
}
	

/*
*
* @Дабавление класса fancybox для фото, страницы "Наши работы"
*/
function asio_preprocess_image(&$variables) {
	if($variables['style_name'] == 'gallery'){
		$variables['attributes']['class'][] = 'fancybox';	  
	}	
}	

function asio_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables, $hook) {
		$view = $variables['view'];
		$name_view = $view->id();
		if (!empty($view) && isset($view)) {
			$suggestions[] = "views_view_field__". $name_view;
		} 

		//kint($name_view); 
}

function asio_preprocess_views_view_field__name(&$variables) {

	$id = $variables['row']->_entity->tid->value;
	$id_name = $variables['row']->_entity->field_name_settings->target_id;
	$id_value = $variables['row']->_entity->field_value->target_id;
	$name = get_taxonomy_term_by_filter($id_name);
	$value = get_taxonomy_term_by_filter($id_value);
	
	$variables['filter'][$id]['id'] = $id;
	$variables['filter'][$id]['name'] = $name;
	$variables['filter'][$id]['value'] = $value;

} 

function get_taxonomy_term_by_filter($id){
	$term = get_taxonomy_term($id);
	$name = $term->name->value;
	return $name;
}

